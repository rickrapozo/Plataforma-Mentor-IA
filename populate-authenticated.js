// Script para popular o banco de dados como usu√°rio autenticado
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_PUBLISHABLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('Vari√°veis de ambiente do Supabase n√£o est√£o definidas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Dados de exemplo para popular o banco
const sampleVideos = [
  {
    video_id: 'dQw4w9WgXcQ',
    title: 'Audiobook: Como Desenvolver Sua Mente',
    description: 'Um audiobook completo sobre desenvolvimento pessoal e mental.',
    thumbnail_url: 'https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg',
    channel_title: 'Canal de Audiobooks',
    duration: 3600,
    view_count: 50000,
    like_count: 1200,
    published_at: '2024-01-15T10:00:00Z',
    category: 'audiobook',
    tags: ['desenvolvimento pessoal', 'audiobook', 'mente']
  },
  {
    video_id: 'abc123def456',
    title: 'Podcast: Frequ√™ncias dos Mestres - Epis√≥dio 1',
    description: 'Primeiro epis√≥dio do podcast sobre frequ√™ncias e desenvolvimento espiritual.',
    thumbnail_url: 'https://img.youtube.com/vi/abc123def456/maxresdefault.jpg',
    channel_title: 'Frequ√™ncias dos Mestres',
    duration: 2400,
    view_count: 25000,
    like_count: 800,
    published_at: '2024-01-20T15:30:00Z',
    category: 'podcast',
    tags: ['podcast', 'frequ√™ncias', 'mestres', 'espiritualidade']
  },
  {
    video_id: 'xyz789uvw012',
    title: 'Palestra: A Ci√™ncia da Medita√ß√£o',
    description: 'Palestra cient√≠fica sobre os benef√≠cios da medita√ß√£o para o c√©rebro.',
    thumbnail_url: 'https://img.youtube.com/vi/xyz789uvw012/maxresdefault.jpg',
    channel_title: 'Ci√™ncia e Consci√™ncia',
    duration: 5400,
    view_count: 75000,
    like_count: 2100,
    published_at: '2024-01-25T09:15:00Z',
    category: 'lecture',
    tags: ['palestra', 'medita√ß√£o', 'ci√™ncia', 'c√©rebro']
  }
];

async function createTestUser() {
  // Tentar criar um usu√°rio de teste
  const { data, error } = await supabase.auth.signUp({
    email: 'test@example.com',
    password: 'testpassword123'
  });
  
  if (error && error.message !== 'User already registered') {
    console.error('Erro ao criar usu√°rio de teste:', error.message);
    return null;
  }
  
  return data;
}

async function signInTestUser() {
  // Tentar fazer login com o usu√°rio de teste
  const { data, error } = await supabase.auth.signInWithPassword({
    email: 'test@example.com',
    password: 'testpassword123'
  });
  
  if (error) {
    console.error('Erro ao fazer login:', error.message);
    return null;
  }
  
  return data;
}

async function populateDatabase() {
  try {
    console.log('üöÄ Iniciando popula√ß√£o do banco de dados...');
    
    // Verificar se j√° existe um usu√°rio autenticado
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      console.log('üë§ Criando usu√°rio de teste...');
      await createTestUser();
      
      console.log('üîê Fazendo login...');
      const loginData = await signInTestUser();
      
      if (!loginData) {
        console.error('‚ùå N√£o foi poss√≠vel autenticar. Tentando inser√ß√£o direta...');
      } else {
        console.log('‚úÖ Usu√°rio autenticado com sucesso!');
      }
    } else {
      console.log('‚úÖ Usu√°rio j√° autenticado:', user.email);
    }
    
    // Tentar inserir os dados
    console.log('üìù Inserindo dados de exemplo...');
    
    let successCount = 0;
    
    for (const video of sampleVideos) {
      const { data, error } = await supabase
        .from('youtube_videos')
        .insert([video]);
      
      if (error) {
        console.error(`‚ùå Erro ao inserir v√≠deo ${video.video_id}:`, error.message);
      } else {
        console.log(`‚úÖ V√≠deo "${video.title}" inserido com sucesso!`);
        successCount++;
      }
    }
    
    console.log(`\nüìä Resumo: ${successCount}/${sampleVideos.length} v√≠deos inseridos com sucesso`);
    
    // Verificar se os dados foram inseridos
    const { data: videos, error: selectError } = await supabase
      .from('youtube_videos')
      .select('*');
    
    if (selectError) {
      console.error('‚ùå Erro ao buscar v√≠deos:', selectError.message);
      return;
    }
    
    console.log(`\nüìä Total de v√≠deos no banco: ${videos.length}`);
    
    if (videos.length > 0) {
      // Contar por categoria
      const categories = ['audiobook', 'podcast', 'lecture'];
      for (const category of categories) {
        const categoryVideos = videos.filter(v => v.category === category);
        console.log(`   üìö ${category}: ${categoryVideos.length} v√≠deos`);
      }
      
      console.log('\nüìã V√≠deos encontrados:');
      videos.forEach(video => {
        console.log(`   - ${video.title} (${video.category})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

populateDatabase();