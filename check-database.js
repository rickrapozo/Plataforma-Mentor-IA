// Script para verificar v√≠deos no banco de dados e for√ßar atualiza√ß√£o
// Execute no console do navegador

console.log('üîç Verificando v√≠deos no banco de dados...');

async function checkDatabaseContent() {
  try {
    // Verificar se h√° v√≠deos por categoria
    const categories = ['audiobook', 'podcast', 'lecture'];
    let totalVideos = 0;
    
    for (const category of categories) {
      const videos = await window.youtubeService.getVideosByCategory(category);
      console.log(`üìä ${category}: ${videos.length} v√≠deos`);
      totalVideos += videos.length;
      
      // Mostrar alguns t√≠tulos se houver v√≠deos
      if (videos.length > 0) {
        console.log(`   üìù Exemplos: ${videos.slice(0, 3).map(v => v.title).join(', ')}`);
      }
    }
    
    console.log(`üìä Total de v√≠deos no banco: ${totalVideos}`);
    
    if (totalVideos === 0) {
      console.log('‚ö†Ô∏è Nenhum v√≠deo encontrado no banco de dados!');
      console.log('üîÑ Vamos for√ßar a atualiza√ß√£o...');
      await forceUpdateAllCategories();
    } else {
      console.log('‚úÖ V√≠deos encontrados no banco de dados!');
      console.log('üí° Se quiser for√ßar uma nova atualiza√ß√£o, execute: forceUpdateAllCategories()');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar banco de dados:', error);
  }
}

async function forceUpdateAllCategories() {
  console.log('üöÄ For√ßando atualiza√ß√£o de todas as categorias...');
  
  try {
    // Limpar cache for√ßando atualiza√ß√£o
    const categories = ['audiobook', 'podcast', 'lecture'];
    
    for (const category of categories) {
      console.log(`üîÑ For√ßando atualiza√ß√£o da categoria: ${category}`);
      
      // Deletar registros de cache para for√ßar atualiza√ß√£o
      const { error } = await window.supabase
        .from('youtube_api_updates')
        .delete()
        .eq('category', category);
        
      if (error) {
        console.error(`‚ùå Erro ao limpar cache da categoria ${category}:`, error);
      } else {
        console.log(`‚úÖ Cache limpo para categoria: ${category}`);
      }
      
      // Aguardar um pouco entre opera√ß√µes
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log('üîÑ Iniciando nova busca de v√≠deos...');
    
    // Agora for√ßar a inicializa√ß√£o
    await window.youtubeService.initializeAllCategories();
    
    console.log('‚úÖ Atualiza√ß√£o conclu√≠da! Verificando resultados...');
    
    // Verificar quantos v√≠deos foram carregados
    let totalVideos = 0;
    for (const category of categories) {
      const videos = await window.youtubeService.getVideosByCategory(category);
      console.log(`üìä ${category}: ${videos.length} v√≠deos`);
      totalVideos += videos.length;
    }
    
    console.log(`üéâ Total de v√≠deos carregados: ${totalVideos}`);
    
    if (totalVideos > 0) {
      console.log('üéâ Sucesso! Recarregando a p√°gina...');
      setTimeout(() => window.location.reload(), 2000);
    } else {
      console.log('‚ö†Ô∏è Ainda n√£o h√° v√≠deos. Verifique se a API do YouTube est√° funcionando.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao for√ßar atualiza√ß√£o:', error);
  }
}

// Verificar se as depend√™ncias est√£o dispon√≠veis
if (typeof window.youtubeService === 'undefined') {
  console.error('‚ùå youtubeService n√£o encontrado. Recarregue a p√°gina.');
} else if (typeof window.supabase === 'undefined') {
  console.error('‚ùå supabase n√£o encontrado. Recarregue a p√°gina.');
} else {
  console.log('‚úÖ Depend√™ncias encontradas. Iniciando verifica√ß√£o...');
  
  // Disponibilizar fun√ß√µes globalmente
  window.checkDatabaseContent = checkDatabaseContent;
  window.forceUpdateAllCategories = forceUpdateAllCategories;
  
  // Executar verifica√ß√£o automaticamente
  checkDatabaseContent();
}